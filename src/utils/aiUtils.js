// Detecta mat√©ria baseada na mensagem
export const detectSubject = (message) => {
  const subjects = {
    'matem√°tica': ['fun√ß√£o', 'equa√ß√£o', 'derivada', 'integral', '√°lgebra', 'geometria', 'trigonometria', 'c√°lculo'],
    'f√≠sica': ['for√ßa', 'energia', 'movimento', 'velocidade', 'acelera√ß√£o', 'gravidade', 'onda', 'luz'],
    'qu√≠mica': ['√°tomo', 'mol√©cula', 'rea√ß√£o', 'liga√ß√£o', 'elemento', 'tabela peri√≥dica', 'ph', '√°cido'],
    'biologia': ['c√©lula', 'dna', 'evolu√ß√£o', 'fotoss√≠ntese', 'respira√ß√£o', 'reprodu√ß√£o', 'gen√©tica'],
    'hist√≥ria': ['guerra', 'revolu√ß√£o', 'imp√©rio', 's√©culo', 'civiliza√ß√£o', 'cultura', 'brasil'],
    'geografia': ['clima', 'relevo', 'popula√ß√£o', 'pa√≠s', 'continente', 'oceano', 'cidade'],
    'portugu√™s': ['verbo', 'substantivo', 'sintaxe', 'literatura', 'texto', 'gram√°tica', 'reda√ß√£o'],
    'ingl√™s': ['verb', 'noun', 'grammar', 'vocabulary', 'pronunciation', 'english']
  };

  const messageLower = message.toLowerCase();
  for (const [subject, keywords] of Object.entries(subjects)) {
    if (keywords.some(keyword => messageLower.includes(keyword))) {
      return subject;
    }
  }
  return 'geral';
};

// Emoji para cada mat√©ria
export const getSubjectEmoji = (subject) => {
  const emojis = {
    'matem√°tica': 'üìä',
    'f√≠sica': '‚ö°',
    'qu√≠mica': 'üß™',
    'biologia': 'üå±',
    'hist√≥ria': 'üìö',
    'geografia': 'üåç',
    'portugu√™s': 'üìù',
    'ingl√™s': 'üá∫üá∏',
    'geral': 'ü§ñ'
  };
  return emojis[subject] || 'ü§ñ';
};

// Gera resposta da IA
export const getAIResponse = async (message) => {
  const subject = detectSubject(message);
  const emoji = getSubjectEmoji(subject);

  const responses = [
    `${emoji} Interessante! Me conte: o que voc√™ j√° sabe sobre esse assunto?`,
    `${emoji} √ìtima pergunta! Qual seria o primeiro passo para resolver isso?`,
    `${emoji} Vamos pensar juntos. Como voc√™ aplicaria isso na pr√°tica?`,
    `${emoji} Voc√™ est√° no caminho certo! Que tal conectar com algo que j√° conhece?`,
    `${emoji} Excelente! Qual seria o pr√≥ximo passo l√≥gico aqui?`,
    `${emoji} Muito bem! Vamos usar perguntas para te guiar. Que informa√ß√µes voc√™ tem?`,
    `${emoji} √ìtima escolha de tema! Que tal come√ßarmos pelos conceitos b√°sicos?`
  ];

  // Simula delay da API
  await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000));

  let response = responses[Math.floor(Math.random() * responses.length)];

  // Adiciona dicas espec√≠ficas ocasionalmente
  if (Math.random() < 0.4) {
    const tips = {
      'matem√°tica': '\n\nüí° **Dica**: Tente visualizar o problema. Desenhos ajudam muito!',
      'f√≠sica': '\n\nüí° **Dica**: Identifique as grandezas e suas unidades primeiro.',
      'qu√≠mica': '\n\nüí° **Dica**: Lembre-se da tabela peri√≥dica e das propriedades dos elementos.',
      'biologia': '\n\nüí° **Dica**: Estrutura e fun√ß√£o sempre est√£o relacionadas.',
      'hist√≥ria': '\n\nüí° **Dica**: Contextualize no tempo e espa√ßo da √©poca.',
      'geografia': '\n\nüí° **Dica**: Pense nas rela√ß√µes entre espa√ßo, sociedade e natureza.',
      'portugu√™s': '\n\nüí° **Dica**: Analise o contexto e a estrutura do texto.',
      'ingl√™s': '\n\nüí° **Dica**: Context is key! Think about when and how it\'s used.'
    };
    response += tips[subject] || '';
  }

  // Adiciona encorajamento ocasionalmente
  if (Math.random() < 0.3) {
    const encouragements = [
      '\n\nüåü Voc√™ est√° no caminho certo! Continue explorando.',
      '\n\nüí™ √ìtima pergunta! Isso mostra pensamento cr√≠tico.',
      '\n\nüéØ Excelente! Vamos aprofundar esse racioc√≠nio.',
      '\n\nüöÄ Muito bem! Seu progresso √© not√°vel.',
      '\n\nüî• Continue assim! A curiosidade √© o combust√≠vel do aprendizado.'
    ];
    response += encouragements[Math.floor(Math.random() * encouragements.length)];
  }

  return response;
};